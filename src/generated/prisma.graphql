# source: http://localhost:4466
# timestamp: Wed Oct 31 2018 23:03:12 GMT-0400 (Eastern Daylight Time)

type AggregateChannel {
  count: Int!
}

type AggregateGuild {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Channel {
  discordId: String!
  name: String!
  guild: Guild!
}

"""A connection to a list of items."""
type ChannelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  discordId: String!
  name: String!
  guild: GuildCreateOneWithoutChannelsInput!
}

input ChannelCreateManyWithoutGuildInput {
  create: [ChannelCreateWithoutGuildInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateWithoutGuildInput {
  discordId: String!
  name: String!
}

"""An edge in a connection."""
type ChannelEdge {
  """The item at the end of the edge."""
  node: Channel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChannelOrderByInput {
  discordId_ASC
  discordId_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChannelPreviousValues {
  discordId: String!
  name: String!
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChannelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChannelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChannelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
}

input ChannelUpdateInput {
  discordId: String
  name: String
  guild: GuildUpdateOneRequiredWithoutChannelsInput
}

input ChannelUpdateManyMutationInput {
  discordId: String
  name: String
}

input ChannelUpdateManyWithoutGuildInput {
  create: [ChannelCreateWithoutGuildInput!]
  connect: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  delete: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutGuildInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutGuildInput!]
}

input ChannelUpdateWithoutGuildDataInput {
  discordId: String
  name: String
}

input ChannelUpdateWithWhereUniqueWithoutGuildInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutGuildDataInput!
}

input ChannelUpsertWithWhereUniqueWithoutGuildInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutGuildDataInput!
  create: ChannelCreateWithoutGuildInput!
}

input ChannelWhereInput {
  """Logical AND on all given filters."""
  AND: [ChannelWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChannelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChannelWhereInput!]
  discordId: String

  """All values that are not equal to given value."""
  discordId_not: String

  """All values that are contained in given list."""
  discordId_in: [String!]

  """All values that are not contained in given list."""
  discordId_not_in: [String!]

  """All values less than the given value."""
  discordId_lt: String

  """All values less than or equal the given value."""
  discordId_lte: String

  """All values greater than the given value."""
  discordId_gt: String

  """All values greater than or equal the given value."""
  discordId_gte: String

  """All values containing the given string."""
  discordId_contains: String

  """All values not containing the given string."""
  discordId_not_contains: String

  """All values starting with the given string."""
  discordId_starts_with: String

  """All values not starting with the given string."""
  discordId_not_starts_with: String

  """All values ending with the given string."""
  discordId_ends_with: String

  """All values not ending with the given string."""
  discordId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  guild: GuildWhereInput
}

input ChannelWhereUniqueInput {
  discordId: String
}

type Guild {
  discordId: String!
  name: String!
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type GuildConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GuildEdge]!
  aggregate: AggregateGuild!
}

input GuildCreateInput {
  discordId: String!
  name: String!
  channels: ChannelCreateManyWithoutGuildInput
  users: UserCreateManyWithoutGuildsInput
}

input GuildCreateManyWithoutUsersInput {
  create: [GuildCreateWithoutUsersInput!]
  connect: [GuildWhereUniqueInput!]
}

input GuildCreateOneWithoutChannelsInput {
  create: GuildCreateWithoutChannelsInput
  connect: GuildWhereUniqueInput
}

input GuildCreateWithoutChannelsInput {
  discordId: String!
  name: String!
  users: UserCreateManyWithoutGuildsInput
}

input GuildCreateWithoutUsersInput {
  discordId: String!
  name: String!
  channels: ChannelCreateManyWithoutGuildInput
}

"""An edge in a connection."""
type GuildEdge {
  """The item at the end of the edge."""
  node: Guild!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GuildOrderByInput {
  discordId_ASC
  discordId_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GuildPreviousValues {
  discordId: String!
  name: String!
}

type GuildSubscriptionPayload {
  mutation: MutationType!
  node: Guild
  updatedFields: [String!]
  previousValues: GuildPreviousValues
}

input GuildSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GuildSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuildSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuildSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GuildWhereInput
}

input GuildUpdateInput {
  discordId: String
  name: String
  channels: ChannelUpdateManyWithoutGuildInput
  users: UserUpdateManyWithoutGuildsInput
}

input GuildUpdateManyMutationInput {
  discordId: String
  name: String
}

input GuildUpdateManyWithoutUsersInput {
  create: [GuildCreateWithoutUsersInput!]
  connect: [GuildWhereUniqueInput!]
  disconnect: [GuildWhereUniqueInput!]
  delete: [GuildWhereUniqueInput!]
  update: [GuildUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [GuildUpsertWithWhereUniqueWithoutUsersInput!]
}

input GuildUpdateOneRequiredWithoutChannelsInput {
  create: GuildCreateWithoutChannelsInput
  connect: GuildWhereUniqueInput
  update: GuildUpdateWithoutChannelsDataInput
  upsert: GuildUpsertWithoutChannelsInput
}

input GuildUpdateWithoutChannelsDataInput {
  discordId: String
  name: String
  users: UserUpdateManyWithoutGuildsInput
}

input GuildUpdateWithoutUsersDataInput {
  discordId: String
  name: String
  channels: ChannelUpdateManyWithoutGuildInput
}

input GuildUpdateWithWhereUniqueWithoutUsersInput {
  where: GuildWhereUniqueInput!
  data: GuildUpdateWithoutUsersDataInput!
}

input GuildUpsertWithoutChannelsInput {
  update: GuildUpdateWithoutChannelsDataInput!
  create: GuildCreateWithoutChannelsInput!
}

input GuildUpsertWithWhereUniqueWithoutUsersInput {
  where: GuildWhereUniqueInput!
  update: GuildUpdateWithoutUsersDataInput!
  create: GuildCreateWithoutUsersInput!
}

input GuildWhereInput {
  """Logical AND on all given filters."""
  AND: [GuildWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuildWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuildWhereInput!]
  discordId: String

  """All values that are not equal to given value."""
  discordId_not: String

  """All values that are contained in given list."""
  discordId_in: [String!]

  """All values that are not contained in given list."""
  discordId_not_in: [String!]

  """All values less than the given value."""
  discordId_lt: String

  """All values less than or equal the given value."""
  discordId_lte: String

  """All values greater than the given value."""
  discordId_gt: String

  """All values greater than or equal the given value."""
  discordId_gte: String

  """All values containing the given string."""
  discordId_contains: String

  """All values not containing the given string."""
  discordId_not_contains: String

  """All values starting with the given string."""
  discordId_starts_with: String

  """All values not starting with the given string."""
  discordId_not_starts_with: String

  """All values ending with the given string."""
  discordId_ends_with: String

  """All values not ending with the given string."""
  discordId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  channels_every: ChannelWhereInput
  channels_some: ChannelWhereInput
  channels_none: ChannelWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input GuildWhereUniqueInput {
  discordId: String
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Message {
  content: String!
  userId: String!
  channelId: String!
  guildId: String!
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  content: String!
  userId: String!
  channelId: String!
  guildId: String!
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageOrderByInput {
  content_ASC
  content_DESC
  userId_ASC
  userId_DESC
  channelId_ASC
  channelId_DESC
  guildId_ASC
  guildId_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  content: String!
  userId: String!
  channelId: String!
  guildId: String!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateManyMutationInput {
  content: String
  userId: String
  channelId: String
  guildId: String
}

input MessageWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageWhereInput!]
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  userId: String

  """All values that are not equal to given value."""
  userId_not: String

  """All values that are contained in given list."""
  userId_in: [String!]

  """All values that are not contained in given list."""
  userId_not_in: [String!]

  """All values less than the given value."""
  userId_lt: String

  """All values less than or equal the given value."""
  userId_lte: String

  """All values greater than the given value."""
  userId_gt: String

  """All values greater than or equal the given value."""
  userId_gte: String

  """All values containing the given string."""
  userId_contains: String

  """All values not containing the given string."""
  userId_not_contains: String

  """All values starting with the given string."""
  userId_starts_with: String

  """All values not starting with the given string."""
  userId_not_starts_with: String

  """All values ending with the given string."""
  userId_ends_with: String

  """All values not ending with the given string."""
  userId_not_ends_with: String
  channelId: String

  """All values that are not equal to given value."""
  channelId_not: String

  """All values that are contained in given list."""
  channelId_in: [String!]

  """All values that are not contained in given list."""
  channelId_not_in: [String!]

  """All values less than the given value."""
  channelId_lt: String

  """All values less than or equal the given value."""
  channelId_lte: String

  """All values greater than the given value."""
  channelId_gt: String

  """All values greater than or equal the given value."""
  channelId_gte: String

  """All values containing the given string."""
  channelId_contains: String

  """All values not containing the given string."""
  channelId_not_contains: String

  """All values starting with the given string."""
  channelId_starts_with: String

  """All values not starting with the given string."""
  channelId_not_starts_with: String

  """All values ending with the given string."""
  channelId_ends_with: String

  """All values not ending with the given string."""
  channelId_not_ends_with: String
  guildId: String

  """All values that are not equal to given value."""
  guildId_not: String

  """All values that are contained in given list."""
  guildId_in: [String!]

  """All values that are not contained in given list."""
  guildId_not_in: [String!]

  """All values less than the given value."""
  guildId_lt: String

  """All values less than or equal the given value."""
  guildId_lte: String

  """All values greater than the given value."""
  guildId_gt: String

  """All values greater than or equal the given value."""
  guildId_gte: String

  """All values containing the given string."""
  guildId_contains: String

  """All values not containing the given string."""
  guildId_not_contains: String

  """All values starting with the given string."""
  guildId_starts_with: String

  """All values not starting with the given string."""
  guildId_not_starts_with: String

  """All values ending with the given string."""
  guildId_ends_with: String

  """All values not ending with the given string."""
  guildId_not_ends_with: String
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createGuild(data: GuildCreateInput!): Guild!
  createChannel(data: ChannelCreateInput!): Channel!
  createMessage(data: MessageCreateInput!): Message!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGuild(data: GuildUpdateInput!, where: GuildWhereUniqueInput!): Guild
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGuild(where: GuildWhereUniqueInput!): Guild
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGuild(where: GuildWhereUniqueInput!, create: GuildCreateInput!, update: GuildUpdateInput!): Guild!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyGuilds(data: GuildUpdateManyMutationInput!, where: GuildWhereInput): BatchPayload!
  updateManyChannels(data: ChannelUpdateManyMutationInput!, where: ChannelWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyGuilds(where: GuildWhereInput): BatchPayload!
  deleteManyChannels(where: ChannelWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  guilds(where: GuildWhereInput, orderBy: GuildOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guild]!
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  user(where: UserWhereUniqueInput!): User
  guild(where: GuildWhereUniqueInput!): Guild
  channel(where: ChannelWhereUniqueInput!): Channel
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  guildsConnection(where: GuildWhereInput, orderBy: GuildOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GuildConnection!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  guild(where: GuildSubscriptionWhereInput): GuildSubscriptionPayload
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
}

type User {
  discordId: String!
  username: String
  guilds(where: GuildWhereInput, orderBy: GuildOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guild!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  discordId: String!
  username: String
  guilds: GuildCreateManyWithoutUsersInput
}

input UserCreateManyWithoutGuildsInput {
  create: [UserCreateWithoutGuildsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutGuildsInput {
  discordId: String!
  username: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  discordId_ASC
  discordId_DESC
  username_ASC
  username_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  discordId: String!
  username: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  discordId: String
  username: String
  guilds: GuildUpdateManyWithoutUsersInput
}

input UserUpdateManyMutationInput {
  discordId: String
  username: String
}

input UserUpdateManyWithoutGuildsInput {
  create: [UserCreateWithoutGuildsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGuildsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGuildsInput!]
}

input UserUpdateWithoutGuildsDataInput {
  discordId: String
  username: String
}

input UserUpdateWithWhereUniqueWithoutGuildsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGuildsDataInput!
}

input UserUpsertWithWhereUniqueWithoutGuildsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGuildsDataInput!
  create: UserCreateWithoutGuildsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  discordId: String

  """All values that are not equal to given value."""
  discordId_not: String

  """All values that are contained in given list."""
  discordId_in: [String!]

  """All values that are not contained in given list."""
  discordId_not_in: [String!]

  """All values less than the given value."""
  discordId_lt: String

  """All values less than or equal the given value."""
  discordId_lte: String

  """All values greater than the given value."""
  discordId_gt: String

  """All values greater than or equal the given value."""
  discordId_gte: String

  """All values containing the given string."""
  discordId_contains: String

  """All values not containing the given string."""
  discordId_not_contains: String

  """All values starting with the given string."""
  discordId_starts_with: String

  """All values not starting with the given string."""
  discordId_not_starts_with: String

  """All values ending with the given string."""
  discordId_ends_with: String

  """All values not ending with the given string."""
  discordId_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  guilds_every: GuildWhereInput
  guilds_some: GuildWhereInput
  guilds_none: GuildWhereInput
}

input UserWhereUniqueInput {
  discordId: String
}
